{"ast":null,"code":"import { delayPromise } from \"../../utils/utils\";\nimport { SHORT_DELAY_IN_MS } from \"../../constants/delays\";\n\n// Генерирует числа Фибоначчи до указанного номера\nexport const getNumbers = num => {\n  let arr = [1, 1];\n  for (let i = 2; i < num + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n  }\n  return arr;\n};\n\n// Асинхронно сортирует массив чисел Фибоначчи с задержкой и обновляет состояние\nexport const sortFibonacci = async (arr, setState, setLoader) => {\n  const {\n    length\n  } = arr;\n  let numArray = [];\n  // Постепенно добавляет числа Фибоначчи к массиву с задержкой\n  for (let i = 0; i < length; i++) {\n    numArray.push(arr[i]);\n    await delayPromise(SHORT_DELAY_IN_MS);\n    setState(numArray.map(String));\n  }\n  // Завершает сортировку и отключает индикатор загрузки\n  setLoader(false);\n  // Возвращает отсортированный массив\n  return numArray;\n};","map":{"version":3,"names":["delayPromise","SHORT_DELAY_IN_MS","getNumbers","num","arr","i","push","sortFibonacci","setState","setLoader","length","numArray","map","String"],"sources":["/Users/illia/Documents/_2024/_learn /algo-sosh/src/components/fibonacci-page/fibonacci-algorithm.ts"],"sourcesContent":["import { delayPromise } from \"../../utils/utils\";\nimport { SHORT_DELAY_IN_MS } from \"../../constants/delays\";\n\n// Генерирует числа Фибоначчи до указанного номера\nexport const getNumbers = (num: number) => {\n  let arr: number[] = [1, 1];\n  for (let i = 2; i < num + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n  }\n  return arr;\n};\n\n// Асинхронно сортирует массив чисел Фибоначчи с задержкой и обновляет состояние\nexport const sortFibonacci = async (\n  arr: string[],\n  setState: React.Dispatch<React.SetStateAction<string[]>>,\n  setLoader: (value: React.SetStateAction<boolean>) => void\n) => {\n  const { length } = arr;\n  let numArray = [];\n  // Постепенно добавляет числа Фибоначчи к массиву с задержкой\n  for (let i = 0; i < length; i++) {\n    numArray.push(arr[i]);\n    await delayPromise(SHORT_DELAY_IN_MS);\n    setState(numArray.map(String));\n  }\n  // Завершает сортировку и отключает индикатор загрузки\n  setLoader(false);\n  // Возвращает отсортированный массив\n  return numArray;\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;AAChD,SAASC,iBAAiB,QAAQ,wBAAwB;;AAE1D;AACA,OAAO,MAAMC,UAAU,GAAIC,GAAW,IAAK;EACzC,IAAIC,GAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;IAChCD,GAAG,CAACE,IAAI,CAACF,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGD,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;EACnC;EACA,OAAOD,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAC3BH,GAAa,EACbI,QAAwD,EACxDC,SAAyD,KACtD;EACH,MAAM;IAAEC;EAAO,CAAC,GAAGN,GAAG;EACtB,IAAIO,QAAQ,GAAG,EAAE;EACjB;EACA,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,MAAM,EAAEL,CAAC,EAAE,EAAE;IAC/BM,QAAQ,CAACL,IAAI,CAACF,GAAG,CAACC,CAAC,CAAC,CAAC;IACrB,MAAML,YAAY,CAACC,iBAAiB,CAAC;IACrCO,QAAQ,CAACG,QAAQ,CAACC,GAAG,CAACC,MAAM,CAAC,CAAC;EAChC;EACA;EACAJ,SAAS,CAAC,KAAK,CAAC;EAChB;EACA,OAAOE,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}