{"ast":null,"code":"// Меняет местами два элемента в массиве\nexport const swap = (arr, start, end) => {\n  // Сохраняем значение элемента по начальному индексу\n  const tempValue = arr[start];\n\n  // Заменяем значение элемента по начальному индексу значением элемента по конечному индексу\n  arr[start] = arr[end];\n\n  // Заменяем значение элемента по конечному индексу сохраненным значением\n  arr[end] = tempValue;\n};\n\n// Возвращает обещание, которое разрешается после указанной задержки\nexport const delayPromise = delayTime => {\n  return new Promise(resolve => setTimeout(resolve, delayTime));\n};","map":{"version":3,"names":["swap","arr","start","end","tempValue","delayPromise","delayTime","Promise","resolve","setTimeout"],"sources":["/Users/illia/Documents/_2024/_learn /algo-sosh/src/utils/utils.tsx"],"sourcesContent":["import { TString, TArray } from \"../types/common-types\";\n\n// Меняет местами два элемента в массиве\nexport const swap = (\n    arr: TString[] | TArray[],\n    start: number,\n    end: number\n  ): void => {\n    // Сохраняем значение элемента по начальному индексу\n    const tempValue = arr[start];\n\n    // Заменяем значение элемента по начальному индексу значением элемента по конечному индексу\n    arr[start] = arr[end];\n\n    // Заменяем значение элемента по конечному индексу сохраненным значением\n    arr[end] = tempValue;\n  };\n\n  // Возвращает обещание, которое разрешается после указанной задержки\n  export const delayPromise = (delayTime: number) => {\n    return new Promise((resolve) => setTimeout(resolve, delayTime));\n  };"],"mappings":"AAEA;AACA,OAAO,MAAMA,IAAI,GAAGA,CAChBC,GAAyB,EACzBC,KAAa,EACbC,GAAW,KACF;EACT;EACA,MAAMC,SAAS,GAAGH,GAAG,CAACC,KAAK,CAAC;;EAE5B;EACAD,GAAG,CAACC,KAAK,CAAC,GAAGD,GAAG,CAACE,GAAG,CAAC;;EAErB;EACAF,GAAG,CAACE,GAAG,CAAC,GAAGC,SAAS;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAIC,SAAiB,IAAK;EACjD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,SAAS,CAAC,CAAC;AACjE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}