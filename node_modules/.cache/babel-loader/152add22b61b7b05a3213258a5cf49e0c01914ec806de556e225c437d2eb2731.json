{"ast":null,"code":"import { ElementStates } from \"../../types/element-states\";\n// Генерация случайного числа в заданном диапазоне\nexport const randomNum = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Генерация случайного массива объектов TArray\nexport const randomArr = () => {\n  let arr = [];\n  const min = 3;\n  const max = 17;\n  let length = randomNum(min, max);\n  for (let i = 0; i < length; i++) {\n    arr.push({\n      number: randomNum(0, 100),\n      state: ElementStates.Default\n    });\n  }\n  return arr;\n};\n\n// Сортировка выбором\nexport const selectionSort = (size, array) => {\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n  // Внешний цикл прохода по всем элементам массива, кроме последнего\n  for (let i = 0; i < array.length - 1; i++) {\n    // Индекс текущего минимального/максимального элемента\n    let index = i;\n    for (let j = i + 1; j < array.length; j++) {\n      // Сравнение элементов в зависимости от направления сортировки\n      const shouldSwap = size === \"descend\" ? array[index] < array[j] : array[index] > array[j];\n      if (shouldSwap) {\n        index = j;\n      }\n    }\n    // Обмен текущего элемента с найденным минимальным/максимальным элементом\n    let tempArr = array[index];\n    array[index] = array[i];\n    array[i] = tempArr;\n  }\n  return array;\n};\n\n// Сортировка пузырьком\nexport const bubbleSort = (size, array) => {\n  // Проверка на пустой массив\n  if (array.length === 0) return [];\n  // Проверка на массив из одного элемента (уже отсортирован)\n  if (array.length === 1) return array;\n  // Внешний цикл прохода по всем элементам массива\n  for (let i = 0; i < array.length; i++) {\n    // Внутренний цикл для сравнения и перемещения элементов\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Сравнение элементов в зависимости от направления сортировки\n      const shouldSwap = size === \"descend\" ? array[j] < array[j + 1] : array[j] > array[j + 1];\n      if (shouldSwap) {\n        // Обмен элементов, если необходимо\n        let tempArr = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tempArr;\n      }\n    }\n  }\n  // Возврат отсортированного массива\n  return array;\n};","map":{"version":3,"names":["ElementStates","randomNum","min","max","Math","floor","random","randomArr","arr","length","i","push","number","state","Default","selectionSort","size","array","index","j","shouldSwap","tempArr","bubbleSort"],"sources":["/Users/illia/Documents/_2024/_learn /algo-sosh/src/components/sorting-page/sorting-page-algorithm.ts"],"sourcesContent":["import { ElementStates } from \"../../types/element-states\";\nimport { TArray } from \"../../types/common-types\";\n\n// Генерация случайного числа в заданном диапазоне\nexport const randomNum = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Генерация случайного массива объектов TArray\nexport const randomArr = (): TArray[] => {\n  let arr: TArray[] = [];\n  const min = 3;\n  const max = 17;\n  let length = randomNum(min, max);\n  for (let i = 0; i < length; i++) {\n    arr.push({ number: randomNum(0, 100), state: ElementStates.Default });\n  }\n  return arr;\n};\n\n// Сортировка выбором\nexport const selectionSort = (size: string, array: number[]) => {\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n  // Внешний цикл прохода по всем элементам массива, кроме последнего\n  for (let i = 0; i < array.length - 1; i++) {\n    // Индекс текущего минимального/максимального элемента\n    let index = i;\n    for (let j = i + 1; j < array.length; j++) {\n      // Сравнение элементов в зависимости от направления сортировки\n      const shouldSwap =\n        size === \"descend\" ? array[index] < array[j] : array[index] > array[j];\n      if (shouldSwap) {\n        index = j;\n      }\n    }\n    // Обмен текущего элемента с найденным минимальным/максимальным элементом\n    let tempArr = array[index];\n    array[index] = array[i];\n    array[i] = tempArr;\n  }\n  return array;\n};\n\n\n// Сортировка пузырьком\nexport const bubbleSort = (size: string, array: number[]) => {\n  // Проверка на пустой массив\n  if (array.length === 0) return [];\n  // Проверка на массив из одного элемента (уже отсортирован)\n  if (array.length === 1) return array;\n  // Внешний цикл прохода по всем элементам массива\n  for (let i = 0; i < array.length; i++) {\n    // Внутренний цикл для сравнения и перемещения элементов\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Сравнение элементов в зависимости от направления сортировки\n      const shouldSwap =\n        size === \"descend\" ? array[j] < array[j + 1] : array[j] > array[j + 1];\n      if (shouldSwap) {\n        // Обмен элементов, если необходимо\n        let tempArr = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tempArr;\n      }\n    }\n  }\n  // Возврат отсортированного массива\n  return array;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}